name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: voice_assistant_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build shared packages
      run: |
        pnpm --filter @voice-assistant/types build
        pnpm --filter @voice-assistant/ui build
    
    - name: Type check
      run: pnpm typecheck
    
    - name: Lint frontend
      run: pnpm --filter frontend lint
    
    - name: Lint backend
      run: |
        cd backend
        pip install flake8 black
        flake8 app --max-line-length=88 --extend-ignore=E203,W503
        black --check app
    
    - name: Test frontend
      run: pnpm --filter frontend test
      env:
        CI: true
    
    - name: Test backend
      run: |
        cd backend
        pip install pytest pytest-asyncio pytest-cov
        pytest --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/voice_assistant_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        JWT_SECRET: test-jwt-secret
    
    - name: Build frontend
      run: pnpm --filter frontend build
    
    - name: Build backend
      run: |
        cd backend
        python -m py_compile app/main.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        pnpm audit --audit-level moderate
        cd backend && pip install safety && safety check
    
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build frontend
      run: pnpm --filter frontend build
    
    - name: Check bundle size
      run: |
        cd frontend
        npm install -g bundlesize
        bundlesize --max-size 500KB .next/static/chunks/*.js
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
        uploadArtifacts: true
        temporaryPublicStorage: true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, performance]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and push Docker images
      run: |
        docker build -t voice-assistant-frontend ./apps/frontend
        docker build -t voice-assistant-backend ./apps/backend
        # Add Docker registry push commands here
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add deployment commands here
